@page "/products"
@inject HttpClient Http
@using Core.DTOs
@using Core.Enum
@using Microsoft.AspNetCore.Mvc.Rendering
@inject ISessionService SessionService
@rendermode InteractiveServer

<div class="row g-5 d-flex justify-content-center">

    @if (products != null)
    {
        <div class="d-flex justify-content-center align-items-center w-100 py-4 m-auto mb-3">
            <!-- Zoekbalk en Zoeken knop -->

            <input type="text" name="search" @bind="searchTerm" placeholder="Zoek een product..." />
            <button type="submit" @onclick="SearchItem" class="btn btn-primary ms-2 me-5">Zoeken</button>

            <!-- De select naar het einde van de row -->
            <select name="sortmethod" @onchange="OnSortMethodChange" class="form-control ms-5" style="max-width: 200px;">
                @foreach (var sortMethodItem in SortMethodsList)
                {
                    <option value="@sortMethodItem.Value" selected="@(sortMethodItem.Value == sortMethod.ToString())">
                        @sortMethodItem.Text
                    </option>
                }
            </select>

        </div>
        @foreach (ProductDTO product in products)
        {
            <div class="col-auto">
                <div class="card" style="width: 19rem;">
                    <div class="image-container  ratio ratio-4x3">
                        <img src="@product.ImageUrl" class="card-img-top img-fluid" alt="@product.Name"
                            style=" object-fit: cover;">
                    </div>

                    <div class="card-body">

                        <h6 class="card-title text-start col fw-bold">@product.Name</h6>
                        <div class="card-text text-start col fst-italic">@String.Format("€ {0:0.00}", product.Price / 100.0)
                        </div>

                        <hr>

                        <p class="card-text py-1 text-start" style="height: 6rem;">@product.Description</p>

                        <div class="d-flex justify-content-center">
                            <a type="submit" href="/Details/@product.Id" class="btn btn-primary">Details</a>
                        </div>

                    </div>
                </div>
            </div>

        }

    }

    <div class="pagination d-flex justify-content-center" style="gap: 10px;">
        <button @onclick="PreviousPage" class="btn btn-primary @(pageNumber == 1 ? "disabled" : "")"
            style="min-width: 6rem;">Vorige</button>
        <button class="btn btn-primary @(pageNumber == TotalPages ? "disabled" : "")" style="min-width: 6rem;"
            @onclick="NextPage">Volgende</button>
    </div>
    <span class="mb-5 mt-2 text-white">Pagina @pageNumber van @TotalPages</span>

</div>

@code
{

    private List<ProductDTO>? products;
    private SortMethods sortMethod = SortMethods.NameAscending;
    private string? searchTerm;
    private int pageNumber = 1;
    private int pageSize = 9;
    private int TotalPages;

    public List<SelectListItem> SortMethodsList { get; set; } = new List<SelectListItem>
{
new SelectListItem { Value = SortMethods.NameAscending.ToString(), Text = "Alfabetisch oplopend" },
new SelectListItem { Value = SortMethods.NameDescending.ToString(), Text = "Alfabetisch aflopend" },
new SelectListItem { Value = SortMethods.PriceAscending.ToString(), Text = "Prijs oplopend" },
new SelectListItem { Value = SortMethods.PriceDescending.ToString(), Text = "Prijs aflopend" }
};

    protected override async Task OnInitializedAsync()
    {

        await LoadProducts();

    }

    // This method is called when the sort method changes
    private async Task OnSortMethodChange(ChangeEventArgs e)
    {
        if (e.Value != null && e.Value.ToString() != null)
        {
            sortMethod = Enum.Parse<SortMethods>(e.Value.ToString()!);
        }
        await LoadProducts();
    }

    // Load all products with sortMethod and searchterm
    private async Task LoadProducts()
    {
        var response = await
        Http.GetFromJsonAsync<ProductPageDto>($"/api/products?searchTerm={searchTerm}&sortMethod={sortMethod}&pageNumber={pageNumber}&pageSize={pageSize}");

        if (response != null)

        {
            products = response.Products;

            int totalProducts = response.TotalProducts;
            TotalPages = (int)Math.Ceiling(totalProducts / (double)pageSize);

            Console.WriteLine($"pages {TotalPages} products {totalProducts} ");

        }

    }

    // Load products with updated searchterm
    private async Task SearchItem()
    {
        if (searchTerm != null)
        {
            pageNumber = 1;

            await LoadProducts();
        }
    }

    // Go to previous page
    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
        }
        await LoadProducts();
    }

    // go to next page
    private async Task NextPage()
    {
        Console.WriteLine("next page");
        if (pageNumber < TotalPages)
        {
            pageNumber++;
        }

        await LoadProducts();
    }

    // DTO class representing a page of products and the total count of products
    public class ProductPageDto
    {
        public List<ProductDTO>? Products { get; set; }
        public int TotalProducts { get; set; }
    }

}
