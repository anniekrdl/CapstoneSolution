@inject HttpClient Http
@using Core.DTOs
@using Core.Enum



<div class="row g-5 d-flex justify-content-center">
    @if (products != null)
    {
        @foreach (ProductDTO product in products)
        {
            <div class="col-auto">
                <div class="card" style="width: 19rem;">
                    <div class="image-container  ratio ratio-4x3">
                        <img src="@product.ImageUrl" class="card-img-top img-fluid" alt="@product.Name"
                            style=" object-fit: cover;">
                    </div>

                    <div class="card-body">

                        <h6 class="card-title text-start col fw-bold">@product.Name</h6>
                        <div class="card-text text-start col fst-italic">@String.Format("€ {0:0.00}", product.Price / 100.0)
                        </div>

                        <hr>

                        <p class="card-text py-1 text-start" style="height: 6rem;">@product.Description</p>


                        <a asp-action="Details" asp-route-itemid="@product.Id" type="submit" class="btn btn-primary">Details</a>

                    </div>
                </div>
            </div>


        }

    }

    <div class="pagination d-flex justify-content-center" style="gap: 10px;">
        <button @onclick="PreviousPage" class="btn btn-primary @(pageNumber == 1 ? "disabled" : "")"
            style="min-width: 6rem;">Vorige</button>
        <button class="btn btn-primary @(pageNumber == TotalPages ? "disabled" : "")" style="min-width: 6rem;"
            @onclick="NextPage">Volgende</button>
    </div>
    <span class="mb-5 mt-2 text-white">Pagina @pageNumber van @TotalPages</span>



</div>




@code
{

    private List<ProductDTO>? products;
    private SortMethods sortMethod = SortMethods.NameAscending;
    private string? searchTerm;
    private int pageNumber = 1;
    private int pageSize = 9;
    private int TotalPages;
    private int LastPage;




    protected override async Task OnInitializedAsync()
    {


        await LoadProducts();



    }

    private async Task LoadProducts()
    {

        var response = await
        Http.GetFromJsonAsync<ProductPageDto>($"/api/products?searchTerm={searchTerm}&sortMethod={sortMethod}&pageNumber={pageNumber}&pageSize={pageSize}");

        if (response != null)

        {
            products = response.Products;
            int totalProducts = response.TotalProducts;
            TotalPages = (int)Math.Ceiling(totalProducts / (double)pageSize);


        }

    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
        }
        await LoadProducts();
    }

    private async Task NextPage()
    {
        Console.WriteLine("next page");
        if (pageNumber < TotalPages)
        {
            pageNumber++;
        }

        await LoadProducts();
    }


    public class ProductPageDto
    {
        public List<ProductDTO> Products { get; set; }
        public int TotalProducts { get; set; }
    }

}
